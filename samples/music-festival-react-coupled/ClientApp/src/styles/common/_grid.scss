.Grid {
    display: block; /* 1 */
    font-size: 0; /* 2 */
    margin: 0; /* 1 */
    padding: 0; /* 1 */
    text-align: left; /* 3 */
}

/**
* Modifier: center align all grid cells
*/

.Grid--alignCenter {
    text-align: center;
}

/**
* Modifier: right align all grid cells
*/

.Grid--alignRight {
    text-align: right;
}

/**
* Modifier: middle-align grid cells
*/

.Grid--alignMiddle > .Grid-cell {
    vertical-align: middle;
}

/**
* Modifier: bottom-align grid cells
*/

.Grid--alignBottom > .Grid-cell {
    vertical-align: bottom;
}

/**
* Modifier: gutters
*
* NOTE: this can trigger a horizontal scrollbar if the component is as wide as
* the viewport. Use padding on a container, or `overflow-x:hidden` to protect
* against it.
*/

.Grid--withGutter {
    margin-left: calc(-0.5 * $gutterSize);
    margin-right: calc(-0.5 * $gutterSize);
}

.Grid--withOuterGutter {
    margin-left: calc(0.5 * $gutterSize);
    margin-right: calc(0.5 * $gutterSize);
}

.Grid--withGutter > .Grid-cell {
    padding-left: calc(0.5 * $gutterSize);
    padding-right: calc(0.5 * $gutterSize);
}

/* Extra wide gutters */

.Grid--withWideGutter {
    margin-left: calc(-1 * $gutterSize);
    margin-right: calc(-1 * $gutterSize);

    &.Grid--withOuterGutter {
        margin-left: calc(1 * $gutterSize);
        margin-right: calc(1 * $gutterSize);
    }
}

.Grid--withWideGutter > .Grid-cell {
    padding-left: calc(1 * $gutterSize);
    padding-right: calc(1 * $gutterSize);
}

.Grid--hasArticleWidth {
    max-width: 855px;
    margin: 0 auto;
}

// special case, use margin instead of padding when having borderAllSides utility turned on
.Grid--hasBorders > .Grid-cell > a {
    display: block;
    width: 100%;
    position: relative;
    overflow: hidden;
}
.Grid--hasBorders > .Grid-cell > a > img {
    vertical-align: middle;
}

@include bpMedium {
    .Grid--withExtraWideGutter {
        margin-left: calc(-2 * $gutterSize);
        margin-right: calc(-2 * $gutterSize);

        &.Grid--withOuterGutter {
            margin-left: calc(2 * $gutterSize);
            margin-right: calc(2 * $gutterSize);
        }
    }

    .Grid--withExtraWideGutter > .Grid-cell {
        padding-left: calc(2 * $gutterSize);
        padding-right: calc(2 * $gutterSize);
    }
}

.Grid--equalHeight {
    display: flex;
    flex-wrap: wrap;
}

.Grid--equalHeight > .Grid-cell {
    display: flex;
}

.Grid--fit {
    display: flex;
    flex-wrap: wrap;
}

.Grid--fit > .Grid-cell {
    flex: 1 1 0%;
}

/* Gutters above and below a Grid cell */

.Grid--withGutterY {
    margin-top: calc(-1 * $gutterSize);
    margin-bottom: calc(-1 * $gutterSize);
    line-height: 0;
}

.Grid--withGutterY > .Grid-cell {
    margin-top: calc(0.5 * $gutterSize);
    margin-bottom: calc(0.5 * $gutterSize);
}

.Grid--withGutterWideY > .Grid-cell {
    margin-top: 12px;
    margin-bottom: 12px;
}

/* Grid cell
    ========================================================================== */

/**
* No explicit width by default. Rely on combining `Grid-cell` with a dimension
* utility or a component class that extends 'grid'.
*
* 1. Fundamentals of the non-float grid layout.
* 2. Reset font size change made in `Grid`.
* 3. Keeps content correctly aligned with the grid direction.
* 4. Controls vertical positioning of units.
* 5. Make cells full-width by default.
*/

.Grid-cell {
    box-sizing: border-box;
    display: inline-block; /* 1 */
    font-size: 16px; /* 2 */
    font-size: 1rem; /* 2 */
    margin-right: 0;
    margin-left: 0;
    padding-right: 0;
    padding-left: 0;
    text-align: left; /* 3 */
    vertical-align: top; /* 4 */
    width: 100%; /* 5 */
}

/**
* Modifier: horizontally center one unit
* Set a specific unit to be horizontally centered. Doesn't affect
* any other units. Can still contain a child `Grid` object.
*/

.Grid-cell--center {
    display: block;
    margin-right: auto;
    margin-left: auto;
}

.Grid-cell--text-center {
    text-align: center;
}
